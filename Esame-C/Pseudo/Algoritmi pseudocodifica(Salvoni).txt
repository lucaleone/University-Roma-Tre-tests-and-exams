--------------------
CERCA IN PREORDINE
--------------------

cerca(t,v){
	
	return cercaric(t.root, v);

}

cercaric(n,v){

	if(n==NULL)
		return FALSE;
	if(n.info == info)
		return TRUE;	
	l= cercaric(n.left,v);
	r = cercaric(n.right,v);

	return l || r;

}

---------------------
CERCA IN POST ORDINE
---------------------

cerca(t,v){

	return RIC(t.root, v)
}

RIC(n,v){
	if(n == NULL)
		return false
	l = RIC(n.left,v)
	r = RIC(r.right,v)

	if(n.info == v)
		return true
	return l || r	
}


---------------------------
CERCA IN VISITA SIMMETRICA
---------------------------

cerca(t,v){

	return RIC(t.root, v)
}

RIC(n,v){
	if(n == NULL)
		return false
	l = RIC(n.left,v)
	
	if(n.info == v)
		return true

	r = RIC(r.right,v)

	return l || r	
}

-----------
CONTA-NODI
-----------

CONTA(t)
	RETURN ric(t.root)

ric(n)
	if(n==NULL)
		return 0;

	l = ric(n.left)
	r = ric(n.right)

	return 1+l+r;

-------------------
CAMMINO PRE ORDINE
-------------------

cammino(t)
	return ric(t.root)

ric(n)
	if(n == NULL)
		return true;
	if(n.left != NULL && n.right != NULL)
		return false;
	return ric(n.left) && ric(n.right)

-------------
ALTEZZA(t)
-------------

altezza(t)
	return HEIGHT(t.root)

HEIGHT(n)
	if(n == NULL)
		return -1

	l = HEIGHT(n.left)
	r = HEIGHT(n.right)

	if(r>l)	
		return r + 1
	return l + 1

---------
AVERAGE
---------

1) la funzione ricorsiva ritorna un riferimento ad un oggetto che contiene una coppia di valori
2) passo alla funzione ricorsiva un oggetto che simula delle variabili globali
3) passo un array di 2 posizioni alla funzione ricorsiva

utilizziamo la terza strategia

AVERAGE(t)
	/*creo un array di 2 interi*/

	if(t.root == NULL)
		error("albero vuoto")
	
	A[0] = 0
	A[1] = 0

	AVERAGERIC(t.root,A)

	return A[0]/A[1]


AVERAGERIC(n, A)
	if(n == NULL)
		return A
	
	A[0] = A[0] + n.info
	A[1] = A[1] + 1

	AVERAGERIC(n.right, A)
	AVERAGERIC(n.left, A)


------------
POTA(t,x)
------------

Pota(t,x)
	if(x==t.root)
		t.root = NULL
	else
		p=x.parent

		if(x==p.left)
			p.left = NULL
		else
			p.right = NULL

-----------------------
PRENTESI-SIMMETRICA(t)
-----------------------

PARENTESI-SIMMETRICA
	parentesiric(t.root)

parentesiric(r)
	if(r = NULL)
		print("()")
	else
		print("(")
		ric(r.left)
		print(r.info)
		ric(r.right)
		print(")")
		

-----------------
VALORE-NONNO(t)
-----------------

VALORE-NONNO(t)
	return valorenonnoric(n)

valorenonnoric(n)
	if(n==NULL)
		return 0
	l = valorenonnoric(l.left)
	r = valorenonnoric(r.right)

	if(proprieta(n))
		return 1 + l + r
	else 	
		return l+r

proptieta(n)
	if(n.parent == NULL)
		return false
	if(n.parent.parent == NULL)
		return false
	if(n.info == n.parent.parent.info)
		return true
	
	return false

---------------------------
PARENTELA(n1,n2)
---------------------------

PARENTELA(n1,n2) // n1 e n2 diverso da NULL
/*L1 e L2 sono 2 liste semplicemente concatenate*/
	ANTENATI(n1,L1)
	ANTENATI(n2,L2)

	x1 = L1.head
	x2 = L2.head

	while	x1 != NULL && x2 != NULL && x1.info == x2.info
		x1 = x1.next
		x2 = x2.next
		ELIM-PRIMO(L1)
		ELIM-PRIMO(L2)
	return LUNG(L1)+LUNG(L2)

ANTENATI(n,L)
	repeat
		INSERT(L,n.info)
		n = n.parent
	until(n == NULL)

INSERT(L,i)
	/*n nuovo elemento della lista*/
	n.info = i
	n.next = L.head
	L.head = n

ELIM-PRIMO(L)
	l.head = l.head.next

LUNG(L)
	/*Crea un nodo x e un int cont*/
	cont = 0
	x = L.head
	while(x != NULL)
		cont++
		x = x.next
	return cont

--------------------
CONTA-NODI(t)
--------------------

CONTA-NODI(t)
	return RIC(t.root)

RIC(n)
	if(n == NULL)
		return 0
	nodifigli = 0
	x = n.left
	while x != NULL
		nodifigli += RIC(x)
		x = x.right
	return nodifigli + 1 

----------------------------------
CERCA(t,k) (con alberi qualsiasi)
----------------------------------

CERCA(t,k)
	return RIC(t.root,k)

RIC(n,k)
	if(n == NULL)
		return NULL;
	if(n.info == k)
		return n;
	x = n.left
	while(x != NULL)
		output = RIC(x,k)
		if(output != NULL)
			return output
		x = x.right;

	return NULL;
oppure...

CERCA(t,k)
	return RIC(t.root,k)

RIC(n,k)
	if(n == NULL)
		return NULL;
	if(n.info == k)
		return n;
	left = RIC(n.left)
	right = RIC(n.right)
	if (left == NULL)
		return right
	return left

----------------
BINARIO(t)
----------------

BINARIO(t)
	return RIC(n)

RIC(n)
	if(n == NULL)
		return TRUE
	bin = n.left == NULL || n.left.right != NULL || n.left.right.right == NULL

	x = n.left
	while x != NULL
		bin = bin && RIC(x)
		x = x.right
	return bin

--------------------------------------
CONTA_MAGGIORI_DI_K(t,k)
--------------------------------------

CONTA_MAGGIORI_DI_K(t,k)
	ret RIC(t.root,k)

RIC(n,k)
	if(n == null) return 0

	l = ric(n.left,k)
	r = ric(n.right,k)

	if(n.key>k) ret l+r+1


oppure

RIC(n,k)
	if(n == null) return 0
	
	r = ric(n.right,k)
	if(n.key<=k)
		return r
	else
		l = ric(n.left,k)
		return r+l+1


---------------------------------------
LISTE(A) ESERCIZI SUI GRAFI
---------------------------------------

LISTE(A)
	/* B e un nuovo rray con a.length posizioni */
	for i=0 to b.length
		b[i] = NULL

	for i=0 to A.length-1
		for j=0 to A[0].length-1
			if A[i,j] == 1
				ADD(B,i,j);
	return B;

ADD(B,i,j)
	/* x e un nuovo elemento */
	x.key = j
	x.prev = NULL
	x.next = b[i]

	if B[i] != NULL
		B[i].prev= x
	B[i] = x

-------------------------------------
GRADO-USCITA(A,u)
-------------------------------------

GRADO-USCITA(A,u)
	grado = 0;
	
	for i=0 to a.length-1
		rado += A[u][i]
	return grado

---------------------------------------
CAPPIO(A) (autoanelli)
---------------------------------------

CAPPIO(A)

	somma = 0
	for i = 0 to a.length-1
		somma = somma + A[i][i]
	
	return somma

----------------------------
MATRICE(A)
----------------------------

MATRICE(A)
	/*M matrice di interi A.lenght x A.length*/
	
	for i = 0 to A.length-1
		for j = 0 to A.length-1
			M[i][j] = 0

	for i=0 to A.length-1
		x = A[i]
		while x != NULL
			M[i][x.key] = 1
			x = x.next
	reuturn M

------------------------------------
GRADO-USCITA(A,u)
------------------------------------

GRADO-USCITA(A,u)
	x = A[u]
	grado = 0;
	while x != NULL
		grado = grado + 1
		x = x.next

	return grado

------------------------------------------------------
GRADO-INGRESSO(A,u)
------------------------------------------------------

GRADO-INGRESSO(A,u)
	grado = 0;
	
	for i = 0 to A.length-1
		x = A[i]
		while x != NULL
			if(x.key == u)
				grado = grado + 1
	return grado

---------------------------------------------------------
ESERCIZI SUI GRAFI FATTI DA ME
---------------------------------------------------------

VERIFICA-ARCO(A,u,v)
	x = A[u]
	while(x != NULL)
		if x.key = v
			return true
		x = x.next

	return false

VERIFICA-NON-ORIENTATO(A)
	for i = 0 to A.length-1
		x = A[i]
		while(x != NULL)
			if !VERIFICA-ARCO(A,x.key,i)
			return false
			x = x.next
	return true

VERIFICA-POZZO(A,u)
	return A[u] == NULL

VERIFICA-SORGENTE(A,u)

	for i = 0 to A.length


		x = A[i]
		while(x != NULL)
			if x.key == u
				return false
	return true

Theta di n, perche per essere una sorgente in ogni cella dell'array si dovranno avere meno di n archi, (altrimenti si restituisce false
all'istante) ergo la complessita sara sempre minore di n^2, percio dire theta di n^2 e sbagliato, mentre dire O grande di n^2 e corretto

VERIFICA-UNIONE(A1,A2)
	i, j = 0
	trovato = false

	while(i<A.length)
		while(j<A2.length)
			x = A1[i]
			while(x != NULL and !trovato)
				if(x.key = j)
					trovato = true
			if(!trovato)
				x = A2[i]
				while(x != NULL and !trovato)
					if(x.key = j)
						trovato = true
			if(!trovato)
				return false
			j = j+1
					
		i = i+1
	return true

nel caso peggiore e un algoritmo di theta di n^3

VERIFICA_POZZI_E_SORGENTI(A1,A2)

	for i = 0 to A.lenght-1
		if VERIFICA-POZZO(A1[i])
			if VERIFICA-SORGENTE(A2[i])
				continue
			else 
				return false
			
		if VERIFICA-SORGENTE(A1[i])
			if VERIFICA-POZZO(A2[i])
				continue
			else
				return false

	return true

la complessita nel caso peggiore e pari a n^2 poiche il for itera n elementi, e i metodi VERIFICA-POZZO e VERIFICA-SORGENTE
nel loro caso peggiore iterano anche loro theta di n elementi. 

-----------------------------------------------
FINE
-----------------------------------------------


------------------------------------
BFS(A,u) + calcolo della distanza in D
------------------------------------

BFS(A,u)
	for i=0 to color.length-1
		color[i] = 0
		D[i] = 0
	QUEQUE-EMPTY(q)
	ENQUEQUE(q,u)
	color[u] = 1
	while !EMPTY(q)
		v = DEQUEQUE(q)
		x = A[v]
		while x != NULL
			if color[x.info] == 0
				D[x.info] = D[v] + 1
				ENQUEQUE(q, x.info)
				color[x.info] = 1
			x = x.next
		color[v] = 2


------------------------------------------------------------
GRAFO-CONNESSO
------------------------------------------------------------

GRAFO-CONNESSO(A)
	for i=0 to A.lenght-1
		color[i] = 0

	DFS(A,0,color)

	for i=0 to A.lenght-1
		if(color == 0)
			return FALSE

	return TRUE

DFS(A,i,color)
	color[i] = 1
	x = A[i]
	while x != NULL
		if(color[x.info] == 0)
			DFS(A,x.info,color)
		x = x.next
	color[i] = 2


----------------------------------------------
STESSA-COMPONENTE-FORTEMENTE-CONNESSA(A,u,v) FATTO DA ME
----------------------------------------------

STESSA-COMPONENTE-FORTEMENTE-CONNESSA(A,u,v)
	for i=0 to A.length-1
		color[i] = 0

	DFS(A,u,v,color)

	if(color[u] == 1)
		return TRUE
	return FALSE

DFS(A,u,v,color)
	color[u] = 1
	if(u == v)
		for i=0 to A.length-1
			color[i] = 0;
		DFS2(A,v,u,color)
	else
		x = A[u]
		while x != NULL 
			if(color[x.key] == 0)
				DFS(A,u,v,color)
			x = x.next;

DFS2(A,u,v,color)
	color[u] = 1
	
	x = A[u]
	while x != NULL 
		if(color[x.key] == 0)
			DFS2(A,u,v,color)
		x = x.next
	


------------------------------------------
COMP-CONNESSE(A)
------------------------------------------	

COMP-CONNESSE(A)
	cont = 0
	>color e un array...
	for i=0 to A.length-1
		color[i] = 0

	for i=0 to A.length-1
		if(color[i] == 0)
			BFS(A,i,color)
			cont++;
	return cont



-------------------------------------------
ALBERO-RICOPRENTE(A)
-------------------------------------------

ALBERO(A)
	> parent e un array...
	> color e un array...

	for i=0 to A.lenght-1
		color[i] = 0
		parent[i] = -1

	DFS(A,0,color,parent)

	return parent

DFS(A,i,color,parent)
	color[i] = 1
	x = A[i]

	while x != NULL
		v = x.info
		if(color[v] == 0)
			parent[v] = i
			DFS(A,v,color,parent)
		x = x.next
	color[i] = 2

----------------------------------------------------
DFS(A,i,color) con le matrici
---------------------------------------------------

DFS(A,i,color)
	color[i] = 1

	for j = 0 to A.length-1
		if A[i,j] == 1

			if color[j] == 0
				DFS(A,J,color)
	color[i] = 2

------------------------------------------------
DFS(A,v) crea un array ordine il quale contiene all'indice v il numero d'ordine in cui e stato visitato
------------------------------------------------

DFS(A,v)
	>color,ordine...
	for i=0 to A.lenght-1
		color[i] = 0
		ordine[i] = 0

	max = 0;
	DFSRIC(A,v,color,ordine,max)
	return ordine

DFSRIC(A,i,color,ordine,max)
	color[i] = 1

	x = A[i]
	while x != NULL
		v = x.info
		if color[i] == 0 
			ordine[v] = max + 1
			max = max + 1
			DFSRIC(A,v,color,ordine,max)
		x = x.next
	color[i] = 2