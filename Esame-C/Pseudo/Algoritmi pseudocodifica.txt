---------
Completo
---------

COMPLETO(t)

if t==null
	Errore: albero vuoto
return RIC(t.root)
______
RIC(n)

if n == null
	return true
if n.left == null && n.right == null
	return true
else if n.left != null && n.right != null
	l = RIC(n.left) && RIC(n.right)
     else
	return false

---------
DEALLOCA
---------

DEALLOCA(t)

RIC(t.root)
______
RIC(n)

if n == null
	return

RIC(n.left)
RIC(n.right)

free(n)


--------------------------------------------------------
POTA
scrivi la procedura POTA(t,h) che poti un albero binario
lasciando solamente i nodi a profondità minore di h
--------------------------------------------------------
POTA(t,h)

RIC(t.root,h)
______
RIC(n,h)

if n==null
	return

if HEIGHT(n) == h
	n.left = null
	n.right = null
	return
RIC(n.left,h)
RIC(n.right,h)


---------------------
PARENTETICA-PREORDINE
---------------------
PARENTETICA-PREORDINE(t)

RIC(t.root)

______
RIC(n)

if(r = NULL)
		print("()")
	else
		print("(")
		print(r.info)
		ric(r.left)
		ric(r.right)
		print(")")


------------
DUE-FIGLI(t)
------------
DUE-FIGLI(t)

RIC(t.root)

______
RIC(n)

if n == null
	return 0
l = RIC(n.left)
r = RIC(n.right)

if PROPRIETA-FIGLI(n)
	return 1+l+r
else
	return l+r


PROPRIETA-FIGLI(k)

if k == null
	return false

if k.left != null && k.right != null
	return true
return false


--------------
QUATTRO-NIPOTI
--------------
QUATTRONIPOTI(t)

RIC(t.root)

______
RIC(n)

if n == null
	return 0
l = RIC(n.left)
r = RIC(n.right)

if PROPRIETA-NONNI(n)
	return 1+l+r
else
	return l+r

PROPRIETA-NONNI(k)

if k == null
	return false

if PROPRIETA-FIGLI(k.left) && PROPRIETA-FIGLI(k.right)
	return true
return false



-------------
GRADO-MASSIMO
-------------

GRADO-MASSIMO(t)

return RIC(t.root)

______
RIC(n)

if n == null return 0
> x e y interi
x = 0
y = 0
x = CONTA(n)
y = RIC(n.left)
return max(x,y)

CONTA(k)
>cont è un int
cont = 0
while k != null
	cont++
	k = k.right
return cont



		